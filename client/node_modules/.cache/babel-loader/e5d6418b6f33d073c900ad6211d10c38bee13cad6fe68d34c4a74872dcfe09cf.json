{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\levit\\\\Agriculture-MLS\\\\client\\\\src\\\\PropertyList.tsx\";\nimport React from 'react';\n// Import the context hook if using context for state management\nimport { mockProperties } from './data/mockProperties';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PropertyList = () => {\n  // Assuming your context provides a list of properties, replace mockProperties with context data\n  // const { properties } = useSearchContext();\n  const properties = mockProperties; // Using mock data for this example\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-2 w-full gap-4 p-4\",\n    children: properties.map(property => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border rounded-lg overflow-hidden shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: property.imageUrl,\n        alt: property.title,\n        className: \"w-full h-48 object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold\",\n          children: property.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: property.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xl font-bold\",\n          children: property.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this)]\n    }, property.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = PropertyList;\nvar _c;\n$RefreshReg$(_c, \"PropertyList\");","map":{"version":3,"names":["React","mockProperties","jsxDEV","_jsxDEV","PropertyList","properties","className","children","map","property","src","imageUrl","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","address","price","id","_c","$RefreshReg$"],"sources":["C:/Users/levit/Agriculture-MLS/client/src/PropertyList.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useSearchContext } from './SearchContextProvider'; // Import the context hook if using context for state management\r\nimport { mockProperties } from './data/mockProperties';\r\n\r\ninterface Property {\r\n  id: number;\r\n  title: string;\r\n  price: string;\r\n  address: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport const PropertyList = () => {\r\n  // Assuming your context provides a list of properties, replace mockProperties with context data\r\n  // const { properties } = useSearchContext();\r\n  const properties = mockProperties; // Using mock data for this example\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-2 w-full gap-4 p-4\">\r\n      {properties.map((property) => (\r\n        <div key={property.id} className=\"border rounded-lg overflow-hidden shadow-lg\">\r\n          <img src={property.imageUrl} alt={property.title} className=\"w-full h-48 object-cover\" />\r\n          <div className=\"p-4\">\r\n            <h3 className=\"text-lg font-semibold\">{property.title}</h3>\r\n            <p className=\"text-sm text-gray-600\">{property.address}</p>\r\n            <p className=\"text-xl font-bold\">{property.price}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACmC;AAC5D,SAASC,cAAc,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUvD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC;EACA;EACA,MAAMC,UAAU,GAAGJ,cAAc,CAAC,CAAC;;EAEnC,oBACEE,OAAA;IAAKG,SAAS,EAAC,mCAAmC;IAAAC,QAAA,EAC/CF,UAAU,CAACG,GAAG,CAAEC,QAAQ,iBACvBN,OAAA;MAAuBG,SAAS,EAAC,6CAA6C;MAAAC,QAAA,gBAC5EJ,OAAA;QAAKO,GAAG,EAAED,QAAQ,CAACE,QAAS;QAACC,GAAG,EAAEH,QAAQ,CAACI,KAAM;QAACP,SAAS,EAAC;MAA0B;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzFd,OAAA;QAAKG,SAAS,EAAC,KAAK;QAAAC,QAAA,gBAClBJ,OAAA;UAAIG,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAEE,QAAQ,CAACI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC3Dd,OAAA;UAAGG,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAEE,QAAQ,CAACS;QAAO;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3Dd,OAAA;UAAGG,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAEE,QAAQ,CAACU;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA,GANER,QAAQ,CAACW,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOhB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACI,EAAA,GAnBWjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}