{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\levit\\\\Agriculture-MLS\\\\client\\\\src\\\\SearchContextProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Define the shape of the context state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial state\nconst initialState = {\n  searchQuery: '',\n  setSearchQuery: () => {},\n  filters: {},\n  setFilters: () => {},\n  mapViewport: {},\n  setMapViewport: () => {}\n};\n\n// Create context\nconst SearchContext = /*#__PURE__*/createContext(initialState);\n\n// Custom hook to use the SearchContext\nexport const useSearchContext = () => {\n  _s();\n  return useContext(SearchContext);\n};\n\n// Provider component\n_s(useSearchContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const SearchContextProvider = ({\n  children\n}) => {\n  _s2();\n  const [searchQuery, setSearchQuery] = useState(initialState.searchQuery);\n  const [filters, setFilters] = useState(initialState.filters);\n  const [mapViewport, setMapViewport] = useState(initialState.mapViewport);\n\n  // Optionally, sync with URL query params\n  useEffect(() => {\n    // Parse URL params and update local state if needed\n    // This is where you'd synchronize your context state with the URL.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n    value: {\n      searchQuery,\n      setSearchQuery,\n      filters,\n      setFilters,\n      mapViewport,\n      setMapViewport\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s2(SearchContextProvider, \"nsUlsygkFAqaIwrINRbYW6MAkVU=\");\n_c = SearchContextProvider;\nvar _c;\n$RefreshReg$(_c, \"SearchContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","initialState","searchQuery","setSearchQuery","filters","setFilters","mapViewport","setMapViewport","SearchContext","useSearchContext","_s","SearchContextProvider","children","_s2","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/levit/Agriculture-MLS/client/src/SearchContextProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\r\n\r\n// Define the shape of the context state\r\ninterface SearchContextState {\r\n  searchQuery: string;\r\n  setSearchQuery: (query: string) => void;\r\n  filters: Record<string, any>;\r\n  setFilters: (filters: Record<string, any>) => void;\r\n  mapViewport: Record<string, any>;\r\n  setMapViewport: (viewport: Record<string, any>) => void;\r\n}\r\n\r\n// Initial state\r\nconst initialState: SearchContextState = {\r\n  searchQuery: '',\r\n  setSearchQuery: () => {},\r\n  filters: {},\r\n  setFilters: () => {},\r\n  mapViewport: {},\r\n  setMapViewport: () => {},\r\n};\r\n\r\n// Create context\r\nconst SearchContext = createContext<SearchContextState>(initialState);\r\n\r\n// Custom hook to use the SearchContext\r\nexport const useSearchContext = () => useContext(SearchContext);\r\n\r\n// Provider component\r\ninterface SearchContextProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const SearchContextProvider = ({ children }: SearchContextProviderProps) => {\r\n  const [searchQuery, setSearchQuery] = useState<string>(initialState.searchQuery);\r\n  const [filters, setFilters] = useState<Record<string, any>>(initialState.filters);\r\n  const [mapViewport, setMapViewport] = useState<Record<string, any>>(initialState.mapViewport);\r\n\r\n  // Optionally, sync with URL query params\r\n  useEffect(() => {\r\n    // Parse URL params and update local state if needed\r\n    // This is where you'd synchronize your context state with the URL.\r\n  }, []);\r\n\r\n  return (\r\n    <SearchContext.Provider value={{ searchQuery, setSearchQuery, filters, setFilters, mapViewport, setMapViewport }}>\r\n      {children}\r\n    </SearchContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAaC,SAAS,QAAQ,OAAO;;AAExF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA;AACA,MAAMC,YAAgC,GAAG;EACvCC,WAAW,EAAE,EAAE;EACfC,cAAc,EAAEA,CAAA,KAAM,CAAC,CAAC;EACxBC,OAAO,EAAE,CAAC,CAAC;EACXC,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAC;EACpBC,WAAW,EAAE,CAAC,CAAC;EACfC,cAAc,EAAEA,CAAA,KAAM,CAAC;AACzB,CAAC;;AAED;AACA,MAAMC,aAAa,gBAAGb,aAAa,CAAqBM,YAAY,CAAC;;AAErE;AACA,OAAO,MAAMQ,gBAAgB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMd,UAAU,CAACY,aAAa,CAAC;AAAA;;AAE/D;AAAAE,EAAA,CAFaD,gBAAgB;AAO7B,OAAO,MAAME,qBAAqB,GAAGA,CAAC;EAAEC;AAAqC,CAAC,KAAK;EAAAC,GAAA;EACjF,MAAM,CAACX,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAASI,YAAY,CAACC,WAAW,CAAC;EAChF,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAsBI,YAAY,CAACG,OAAO,CAAC;EACjF,MAAM,CAACE,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAsBI,YAAY,CAACK,WAAW,CAAC;;EAE7F;EACAR,SAAS,CAAC,MAAM;IACd;IACA;EAAA,CACD,EAAE,EAAE,CAAC;EAEN,oBACEE,OAAA,CAACQ,aAAa,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEb,WAAW;MAAEC,cAAc;MAAEC,OAAO;MAAEC,UAAU;MAAEC,WAAW;MAAEC;IAAe,CAAE;IAAAK,QAAA,EAC9GA;EAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACN,GAAA,CAhBWF,qBAAqB;AAAAS,EAAA,GAArBT,qBAAqB;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}